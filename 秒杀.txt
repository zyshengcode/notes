修改web.xml的版本：
webapps/examples/web-inf/web.xml  
找到 <web-app  ... version=3.1版本进行复制

日志使用slf4j(接口，规范)+logback（实现--还有log4j等实现）


商家---------库存------用户

秒杀成功：减库存，记录购买明细-->形成事务


事务：
库存减少没购买明细
记录购买明细没有减少库存   --->出现超卖或则少卖


难点：
竞争

mysql对于竞争---->由事务和行级锁来解决

库存表：
库存id，商品名称，库存数量，秒杀开启时间，秒杀结束时间，秒杀记录的创建时间

秒杀成功明细表：
使用秒杀商品和手机号码二个字段做联合主键--->放置重复秒杀等唯一性判断


spring——mybatis整合  使用xml提供sql，使用dao接口提供mapper实现类

<context :property-placeholder location:"指定数据库连接">

使用联合主键--->当id和phone重复，不能执行插入，否则会报主键冲突的异常





------------service-----------
DTO：数据传输层

数据字典：常量来表述（描述错误信息等）

使用枚举表示常量数据字典

spring-ioc注入方式和场景

1.xml  第三方类库  如datasource和sqlsessionfactory

2.注解   项目中自身开发使用的类  如@service @controller

3.java配置  需要代码控制对象创建的场景   如：自定义修改依赖类库



---------web------
restful  /模块/资源/集合 

get/seckill/liat
get/seckill/{id}/detail
get/seckill/time/now


http请求--->servlet容器--->handlermapping-->handleradapter--->handler

在requestmapping（produces={“application/json,charset=utf-8”},
@cookieValue(value="killPhone",required=false)）
指定了返回的数据格式为json，以及cookie的访问
required=false表示没有value="killPhone"的时候也可以进入该方法

web.xml的配置

1.配置springmvc的dispatcherServlet

	---配置springmvc需要加载的配置文件

<mvc:annotation-driver/>开启注解模式
<mvc:default-servlet-handler/>1.静态资源的处理2.允许用/来做映射（在web.xml中）

produces = "application/json;charset=utf-8"-->只能用这个格式，不能再前面加上{}

@CookieValue(value = "userPhone",required = false) Long userPhone
(value = "userPhone"与前端的cook属性值相对应



========并发api设计=====
CDN: 加速用户获取数据的系统（请求不变的静态资源如：html，js等）    DNS

mysql采用innodb引擎。innodb引擎采用行级锁

采用redis优化

1.引入jedis依赖

jvm-serializers

mybatis调用存储过程

mapper接口参数为map集合---方法不需要有返回值

<select  statementType="CALLABLE"> 使用call语句调用存过
	call   (存过名字)execute_skill(
	 #{参数名字（由server层的key传入），jdbc类型，是输出还是输入（in还是out）}
	 #{}
	 #{} 参数----------需要定义out变量来输出存过的执行结果	
)
</>

在server调用dao层的时候    将参数传入

通过map.get（key）--->来得到out类型输出的变量


