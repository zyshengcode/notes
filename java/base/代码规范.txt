命名 
1.获取单个对象的方法用 get 做前缀。    
2. 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。    
3.获取统计值的方法用 count 做前缀。    
 领域模型命名规约  
1.数据对象：xxxDO，xxx 即为数据表名。    
2.数据传输对象：xxxDTO，xxx 为业务领域相关的名称。    
3.展示对象：xxxVO，xxx 一般为网页名称。    
4.POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO

equals用法：
所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。
 说明：对于 Integer var = ?  在-128 至 127 范围内的赋值，
Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，
这个区间内的 Integer 值可以直接使用==进行 判断，但是这个区间之外的所有数据，
都会在堆上产生，并不会复用已有对象，这是一个大坑， 推荐使用 equals 方法进行判断。 


构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。 


泛型必须为对象，即不能为基础数据类型


7. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。
remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。 
public E remove(int index) {
        rangeCheck(index);

        modCount++;
        E oldValue = elementData(index);

        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--size] = null; // clear to let GC do its work

        return oldValue;
    }
在集合中进行操作时，当modCount != expectedModCount时会抛出修改异常。
通过源码可以知道，集合在增加，删除元素时都会修改modCount的值，当在集合中删除时，
modCount+1,而expectedModCount未改变，而在集合删除完之后，迭代器指向下一个对象（即调用next()方法），
会检测出不一致而抛出异常。
final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }


8：BeanUtils.copyProperties

如果A中属性为false，B中的属性也为false，从Acopy到B之后B中的false变为true
