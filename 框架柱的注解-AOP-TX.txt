@value与@configurationProperties

@value用于业务逻辑层简单的获取配置文件中的值 
@value（"$(person.nama)"）  ----获取配置文件的值
private String name;

@configurationProperties 支持复杂类型的封装，默认从全局配置文件获取值
@configurationProperties（prefix=“person”）获取配置文件person下面的值， 用于javabean映射配置文件中的值 ----在数据库方面

===========================================================================
@properties  加载指定的配置文件
@properties （value={classpath:a.properties}） 

@importResource:导入spring的配置文件，让配文件的内容生效 ---加载主类上面
@importResource（location={classpath：a.properties}）

@configuration --------表示是配置类

=======================================================
EnableAutoConfiguration帮助boot自动导入org.springframework.boot.autoconfigure.EnableAutoConfiguration
org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector
org.springframework.boot.autoconfigure.AutoConfigurationImportSelector
org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#selectImports
（基于上面的selectImports方法）在这个得到候选配置org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#getCandidateConfigurations
SpringFactoriesLoader.loadFactoryNames利用springloader来进行加载
org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames
在类路径下得到资源 classLoader.getResources("META-INF/spring.factories") 
扫描所有jar包下面的META-INF/spring.factories这个文件
将文件包装为properties  Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));

从propertie得到EnableAutoConfiguration类名的对应值并且添加到容器
获取类名的值 ： String factoryClassNames = properties.getProperty(factoryClassName);
factoryClassName--->来自loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass()
中的getSpringFactoriesLoaderFactoryClass这个方法返回
return EnableAutoConfiguration.class;得到类名的对应值


META-INF/spring.factories主要为一些组件信息


===========================springaop==============
面向切面编程与面向对象互补

从业务代码中剥离非业务代码
注解版本：
@Aspect+@Component------ >声明切面
@pointcut --------->切点（只是表达式，说明往哪里切，切哪里）
@adviser -->包括@before等，通知



   ----->pointcut（表达式）---切入点-->表示一组Join Point
切面
   ----->adviser--->五种通知集合对应五种注解	



切面表达式:designators+wildcards(通配符)+operator（&&，||等）

1.先定义@pointcut（“within（com.ibm.service.*）”）---->service下面的所有方法 @pointcut（“within（com.ibm.service.Proservice）”）-----> Proservice类下面的所有方法
	public void method(){}

2. 在通知里面引入@Before("method()")


======================
spring aop的两种写法aspect和advisor





